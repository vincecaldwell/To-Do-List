{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","tasks","handleDelete","index","newArr","splice","setState","handleSubmit","className","numTodos","this","length","onDelete","onFormSubmit","React","Component","SubmitForm","term","e","preventDefault","props","onSubmit","type","placeholder","value","onChange","target","Header","TodoList","todos","map","todo","content","key","id","Todo","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAOMA,G,8NACJC,MAAO,CACLC,MAAO,CAAC,SAAU,SAAU,SAAU,W,EAaxCC,aAAe,SAACC,GACd,IAAMC,EAAO,YAAK,EAAKJ,MAAMC,OAC7BG,EAAOC,OAAOF,EAAO,GACrB,EAAKG,SAAS,CAACL,MAAOG,K,EAExBG,aAAe,SAAAN,GACb,EAAKK,SAAS,CAACL,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAwBA,O,uDAhB5C,OACE,yBAAKO,UAAU,WACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAQC,SAAUC,KAAKV,MAAMC,MAAMU,SACnC,kBAAC,EAAD,CAAUV,MAAOS,KAAKV,MAAMC,MAAOW,SAAUF,KAAKR,eAClD,kBAAC,EAAD,CAAYW,aAAcH,KAAKH,qB,GAVvBO,IAAMC,YA2BlBC,E,4MACJhB,MAAO,CAAEiB,KAAM,I,EACfV,aAAe,SAACW,GACdA,EAAEC,iBACqB,KAApB,EAAKnB,MAAMiB,OACd,EAAKG,MAAMP,aAAa,EAAKb,MAAMiB,MACnC,EAAKX,SAAS,CAAEW,KAAM,O,uDAEd,IAAD,OACP,OACE,0BAAMI,SAAUX,KAAKH,cACnB,2BACEe,KAAK,OACLd,UAAU,QACVe,YAAY,aACZC,MAAOd,KAAKV,MAAMiB,KAClBQ,SAAW,SAACP,GAAD,OAAO,EAAKZ,SAAS,CAACW,KAAMC,EAAEQ,OAAOF,WAElD,4BAAQhB,UAAU,UAAlB,e,GAlBiBM,IAAMC,WA0BzBY,EAAS,SAACP,GACd,OACE,yBAAKZ,UAAU,8DACb,wBAAIA,UAAU,4BAAd,YACYY,EAAMX,SADlB,YAQAmB,EAAW,SAACR,GAChB,IAAMS,EAAQT,EAAMnB,MAAM6B,KAAI,SAACC,EAAM5B,GACnC,OAAO,kBAAC,EAAD,CAAM6B,QAASD,EAAME,IAAK9B,EAAO+B,GAAI/B,EAAOS,SAAUQ,EAAMR,cAErE,OACE,yBAAKJ,UAAU,iBACZqB,IAMDM,EAAO,SAACf,GACZ,OACE,yBAAKZ,UAAU,aACZY,EAAMY,QACP,4BAAQxB,UAAU,yBAAyB4B,QAAU,WACpDhB,EAAMR,SAASQ,EAAMc,SAQbnC,ICpFKsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.76e61265.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'tachyons';\nimport 'bulma';\n\n\n\nclass App extends React.Component {\n  state ={\n    tasks: ['task 1', 'task 2', 'task 3', 'task 4']\n  };\n  render() {\n    return (\n      <div className='wrapper'>\n        <div className='card frame'>\n          <Header numTodos={this.state.tasks.length} />\n          <TodoList tasks={this.state.tasks} onDelete={this.handleDelete} />\n          <SubmitForm onFormSubmit={this.handleSubmit} />\n        </div>\n      </div>\n    );\n  }\n  handleDelete = (index) => {\n    const newArr= [...this.state.tasks];\n    newArr.splice(index, 1);\n    this.setState({tasks: newArr});\n  }\n  handleSubmit = tasks => {\n    this.setState({tasks: [...this.state.tasks, tasks] } );\n  }\n}\n\n\n\nclass SubmitForm extends React.Component {\n  state ={ term: '' };\n  handleSubmit = (e) => {\n    e.preventDefault ();\n    if(this.state.term === '') return;\n    this.props.onFormSubmit(this.state.term);\n    this.setState({ term: ''});\n  }\n  render() {\n    return(\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type='text'\n          className='input'\n          placeholder='Enter Item'\n          value={this.state.term}\n          onChange={ (e) => this.setState({term: e.target.value} ) }\n        />\n        <button className='button'>Submit</button>\n      </form>\n    );\n  }\n}\n\n\n\nconst Header = (props) => {\n  return (\n    <div className='flex items-center justify-center pa4 bg-lightest-blue navy'>\n      <h1 className='card-header-title header'>\n        You have {props.numTodos} Todos\n      </h1>\n    </div>\n  )\n}\n\n\nconst TodoList = (props) => {\n  const todos = props.tasks.map((todo, index) => {\n    return <Todo content={todo} key={index} id={index} onDelete={props.onDelete} />\n  })\n  return (\n    <div className='list-wrapper '>\n      {todos}\n    </div>\n  );\n}\n\n\nconst Todo = (props) => {\n  return(\n    <div className='list-item'>\n      {props.content}\n      <button className=\"delete is-pulled-right\" onClick={ () =>\n      {props.onDelete(props.id) } }>\n      </button>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}